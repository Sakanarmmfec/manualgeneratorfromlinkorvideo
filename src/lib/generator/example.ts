/**
 * Example usage of the Document Generator and Template Engine
 * Demonstrates complete document generation pipeline
 */

import { DocumentGenerator } from './DocumentGenerator';
import { DocumentRequest, ProcessedContent, DocumentSection, SourceInfo } from '../../types';

/**
 * Example: Generate a complete Thai user manual
 */
export async function generateExampleUserManual(): Promise<void> {
  try {
    // Initialize the document generator
    const generator = new DocumentGenerator();
    await generator.initialize();

    // Create a sample document request
    const request: DocumentRequest = {
      productUrl: 'https://example.com/smartphone-x1',
      documentType: 'user_manual',
      language: 'thai',
      mfecTemplate: 'user_manual',
      includeImages: true,
      customInstructions: 'Include detailed setup instructions and troubleshooting guide'
    };

    // Create sample processed content (normally this would come from AI processing)
    const processedContent: ProcessedContent = {
      translatedContent: '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏ü‡∏ô X1',
      organizedSections: [
        {
          id: 'introduction',
          title: '‡∏ö‡∏ó‡∏ô‡∏≥',
          content: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏™‡∏°‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏ü‡∏ô X1 ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
          level: 1,
          subsections: [],
          images: [
            {
              imageId: 'phone-overview.jpg',
              position: 'top',
              caption: '‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏ü‡∏ô X1',
              size: 'medium'
            }
          ],
          sectionType: 'introduction'
        },
        {
          id: 'features',
          title: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏Å',
          content: '‡∏™‡∏°‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏ü‡∏ô X1 ‡∏°‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢:\n‚Ä¢ ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ OLED ‡∏Ç‡∏ô‡∏≤‡∏î 6.5 ‡∏ô‡∏¥‡πâ‡∏ß\n‚Ä¢ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å 108MP\n‚Ä¢ ‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà 5000mAh\n‚Ä¢ ‡∏ä‡∏¥‡∏õ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• A15 Bionic',
          level: 1,
          subsections: [
            {
              id: 'camera-features',
              title: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏•‡πâ‡∏≠‡∏á',
              content: '‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á X1 ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡∏π‡∏°‡∏≠‡∏≠‡∏õ‡∏ï‡∏¥‡∏Ñ‡∏≠‡∏• 3 ‡πÄ‡∏ó‡πà‡∏≤',
              level: 2,
              subsections: [],
              images: [],
              sectionType: 'features'
            }
          ],
          images: [],
          sectionType: 'features'
        },
        {
          id: 'installation',
          title: '‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
          content: '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:\n1. ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå\n2. ‡πÉ‡∏™‡πà‡∏ã‡∏¥‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á\n3. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wi-Fi\n4. ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Google\n5. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢',
          level: 1,
          subsections: [],
          images: [
            {
              imageId: 'setup-steps.jpg',
              position: 'inline',
              caption: '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
              size: 'large'
            }
          ],
          sectionType: 'installation'
        },
        {
          id: 'usage',
          title: '‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô',
          content: '‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏ü‡∏ô X1 ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ',
          level: 1,
          subsections: [],
          images: [],
          sectionType: 'usage'
        },
        {
          id: 'troubleshooting',
          title: '‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
          content: '‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î\n‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ\n\n‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Wi-Fi ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ\n‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏£‡∏≤‡πÄ‡∏ï‡∏≠‡∏£‡πå',
          level: 1,
          subsections: [],
          images: [],
          sectionType: 'troubleshooting'
        },
        {
          id: 'specifications',
          title: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡πÄ‡∏û‡∏≤‡∏∞',
          content: '‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠: OLED 6.5 ‡∏ô‡∏¥‡πâ‡∏ß 2400x1080\n‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: A15 Bionic\n‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥: 8GB RAM\n‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: 256GB\n‡∏Å‡∏•‡πâ‡∏≠‡∏á: ‡∏´‡∏•‡∏±‡∏á 108MP, ‡∏´‡∏ô‡πâ‡∏≤ 32MP\n‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà: 5000mAh\n‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£: Android 14',
          level: 1,
          subsections: [],
          images: [],
          sectionType: 'specifications'
        }
      ],
      refinedContent: '‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏≤‡∏£‡πå‡∏ó‡πÇ‡∏ü‡∏ô X1 ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡πÄ‡∏û‡∏≤‡∏∞',
      sourceAttribution: {
        originalUrl: 'https://example.com/smartphone-x1',
        extractionDate: new Date('2024-01-01'),
        contentType: 'website',
        attribution: 'Generated from official product page'
      },
      qualityScore: 0.95
    };

    // Generate the document
    console.log('üöÄ Starting document generation...');
    const result = await generator.generateFromRequest(request, processedContent);

    // Display results
    console.log('‚úÖ Document generated successfully!');
    console.log(`üìÑ Document ID: ${result.document.id}`);
    console.log(`üìù Title: ${result.document.title}`);
    console.log(`‚è±Ô∏è  Generation time: ${result.generationTime}ms`);
    console.log(`üìä Quality score: ${result.document.content.qualityScore}`);
    console.log(`üîó Preview URL: ${result.document.previewUrl}`);
    
    // Show export formats
    console.log('\nüì¶ Available exports:');
    Object.entries(result.exportUrls).forEach(([format, url]) => {
      console.log(`  ${format.toUpperCase()}: ${url}`);
    });

    // Show generation statistics
    const stats = generator.getGenerationStats(result.document);
    console.log('\nüìà Generation Statistics:');
    console.log(`  Word count: ${stats.contentStats.wordCount}`);
    console.log(`  Section count: ${stats.contentStats.sectionCount}`);
    console.log(`  Image count: ${stats.contentStats.imageCount}`);
    console.log(`  Template type: ${stats.templateInfo.templateType}`);
    console.log(`  AI model: ${stats.processingInfo.aiModel}`);

    // Show warnings if any
    if (result.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è  Warnings:');
      result.warnings.forEach(warning => console.log(`  - ${warning}`));
    }

    return;

  } catch (error) {
    console.error('‚ùå Document generation failed:', error);
    throw error;
  }
}

/**
 * Example: Generate a product document
 */
export async function generateExampleProductDocument(): Promise<void> {
  try {
    const generator = new DocumentGenerator();
    await generator.initialize();

    const request: DocumentRequest = {
      productUrl: 'https://example.com/laptop-pro',
      documentType: 'product_document',
      language: 'thai',
      mfecTemplate: 'system_manual',
      includeImages: true,
      customInstructions: 'Focus on technical specifications and enterprise features'
    };

    const processedContent: ProcessedContent = {
      translatedContent: '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ Pro ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£',
      organizedSections: [
        {
          id: 'overview',
          title: '‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå',
          content: '‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ Pro ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ã‡∏•‡∏π‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á',
          level: 1,
          subsections: [],
          images: [],
          sectionType: 'introduction'
        },
        {
          id: 'specifications',
          title: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡πÄ‡∏û‡∏≤‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ',
          content: 'CPU: Intel Core i9-13900H\nRAM: 32GB DDR5\nStorage: 1TB NVMe SSD\nGPU: NVIDIA RTX 4070\nDisplay: 16" 4K OLED\nOS: Windows 11 Pro',
          level: 1,
          subsections: [],
          images: [],
          sectionType: 'specifications'
        }
      ],
      refinedContent: '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£',
      sourceAttribution: {
        originalUrl: 'https://example.com/laptop-pro',
        extractionDate: new Date('2024-01-01'),
        contentType: 'website',
        attribution: 'Generated from product specifications'
      },
      qualityScore: 0.92
    };

    const result = await generator.generateFromRequest(request, processedContent);

    console.log('‚úÖ Product document generated successfully!');
    console.log(`üìÑ Document ID: ${result.document.id}`);
    console.log(`üìù Title: ${result.document.title}`);
    console.log(`üì¶ Template: ${result.document.template.documentType}`);

    return;

  } catch (error) {
    console.error('‚ùå Product document generation failed:', error);
    throw error;
  }
}

/**
 * Example: Validate generation requirements
 */
export async function validateGenerationExample(): Promise<void> {
  try {
    const generator = new DocumentGenerator();
    await generator.initialize();

    const request: DocumentRequest = {
      productUrl: 'https://example.com/product',
      documentType: 'user_manual',
      language: 'thai',
      mfecTemplate: 'user_manual',
      includeImages: true
    };

    const validation = await generator.validateGenerationRequirements(request);

    console.log('üîç Validation Results:');
    console.log(`  Valid: ${validation.isValid}`);
    
    if (validation.errors.length > 0) {
      console.log('  Errors:');
      validation.errors.forEach(error => console.log(`    - ${error}`));
    }
    
    if (validation.warnings.length > 0) {
      console.log('  Warnings:');
      validation.warnings.forEach(warning => console.log(`    - ${warning}`));
    }

  } catch (error) {
    console.error('‚ùå Validation failed:', error);
  }
}

/**
 * Example: Get available templates
 */
export async function showAvailableTemplates(): Promise<void> {
  try {
    const generator = new DocumentGenerator();
    await generator.initialize();

    const templates = await generator.getAvailableTemplates();

    console.log('üìã Available MFEC Templates:');
    console.log(`  User Manual: ${templates.userManual.templatePath}`);
    console.log(`  System Manual: ${templates.systemManual.templatePath}`);
    console.log(`  Brand Guideline: ${templates.userManual.brandGuidelinePath}`);
    
    console.log('\nüé® Logo Assets:');
    Object.entries(templates.userManual.logoAssets).forEach(([type, path]) => {
      console.log(`  ${type}: ${path}`);
    });

  } catch (error) {
    console.error('‚ùå Failed to get templates:', error);
  }
}

// Export all examples for easy testing
export const examples = {
  generateExampleUserManual,
  generateExampleProductDocument,
  validateGenerationExample,
  showAvailableTemplates
};